# SPDX-FileCopyrightText: 2023 Gert van Dijk <github@gertvandijk.nl>
#
# SPDX-License-Identifier: CC0-1.0

[build-system]
requires = [
    "setuptools>=61.0.0",  # For reading all configuration from pyproject.toml
    "setuptools-scm[toml]>=6.2",
]
build-backend = "setuptools.build_meta"

[project]
name = "purepythonmilter"
authors = [
    { name = "Gert van Dijk", email = "github@gertvandijk.nl" },
]
description = "A Milter library and app framework in pure-Python with asyncio"
license = { text = "Apache License 2.0" }
dynamic = ["version", "readme"]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Topic :: Communications :: Email",
    "Topic :: Communications :: Email :: Filters",
    "Topic :: Communications :: Email :: Mail Transport Agents",
    "Topic :: Software Development :: Libraries",
    "Typing :: Typed",
]
dependencies = [
    "attrs",
]

[project.optional-dependencies]
development = [
    "black>=23.1.0",
    "build",
    "mypy>=1.1.1",
    "pytest-asyncio",
    "pytest-cov",
    "pytest",
    "reuse",
    "ruff>=0.0.272",
    "setuptools-scm[toml]>=6.2",
    "twine",
    "validate-pyproject[all]",
]
examples = [
    "click",
]

[project.urls]
homepage = "https://github.com/gertvdijk/purepythonmilter"
repository = "https://github.com/gertvdijk/purepythonmilter.git"

[tool.setuptools]
license-files = ["LICENSES/*.txt"]
include-package-data = false

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.dynamic]
readme = { file = ["README.md"], content-type = "text/markdown" }

[tool.setuptools_scm]
version_scheme = "guess-next-dev"

[tool.ruff]
src = ["src", "tests"]
target-version = "py310"
select = [
    "F",     # Pyflakes
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "C90",   # mccabe
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "YTT",   # flake8-2020
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "FBT",   # flake8-boolean-trap
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "DJ",    # flake8-django
    "EXE",   # flake8-executable
    "FA",    # flake8-future-annotations
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "INT",   # flake8-gettext
    "PTH",   # flake8-use-pathlib
    "TD",    # flake8-todos
    "FIX",   # flake8-fixme
    "PD",    # pandas-vet
    "PGH",   # pygrep-hooks
    "PL",    # Pylint
    "TRY",   # tryceratops
    "FLY",   # flynt
    "NPY",   # NumPy-specific rules
    "AIR",   # Airflow
    "RUF",   # Ruff-specific rules

    # Generally good suggestions, but disabled, because too invasive or too much effort
    # for now to fix.
    # "D",     # pydocstyle
    # "EM",    # flake8-errmsg
    # "G",     # flake8-logging-format

    # Disabled, because it also enforces commas on single-item function calls broken
    # over multiple lines (non-configurable).
    # "COM",   # flake8-commas

    # Disabled, because unused arguments are sometimes purposefully unused but included
    # for brevity or API requirements as reason (e.g. the callable is passed).
    # "ARG",   # flake8-unused-arguments

    # Disabled for having plain erroneous auto-fixes removing actual comments as
    # 'dead code'. ðŸ˜•
    # "ERA",   # eradicate
]
ignore = [
    # "Avoid specifying long messages outside the exception class"
    # https://github.com/guilatrova/tryceratops/blob/main/docs/violations/TC003.md
    # "Abstract `raise` to an inner function"
    # https://github.com/guilatrova/tryceratops/blob/main/docs/violations/TC301.md
    # Good suggestions, but too invasive for now to fix.
    "TRY003",
    "TRY301",

    # "Missing type annotation for `self` in method"
    # https://github.com/charliermarsh/ruff/blob/main/docs/rules/missing-type-self.md
    # "Missing type annotation for `cls` in classmethod"
    # https://github.com/charliermarsh/ruff/blob/main/docs/rules/missing-type-cls.md
    # ... seem absolutely ridiculous. ðŸ¤¨
    "ANN101",
    "ANN102",

    # "Use of assert detected" https://stackoverflow.com/a/68429294/1254292
    "S101",

    # "Missing author in TODO; try: `# TODO(<author_name>): ...`"
    "TD002",
    # "Missing issue link on the line following this TODO"
    "TD003",

    # "Line contains TODO"
    "FIX002",
]

[tool.ruff.per-file-ignores]
"tests/**" = [
    # "SLF001 Private member accessed" is OK in tests.
    "SLF001",

    # "Relative imports from parent modules are banned"
    # https://github.com/adamchainz/flake8-tidy-imports#ban-relative-imports
    # is OK in tests or else it looks like 'tests' is an actual package...
    "TID252",

    # "Using the global statement to update [...] is discouraged" is OK in tests.
    "PLW0603",
]

[tool.ruff.isort]
required-imports = [
    # PEP-563 (new semantics for annotations) is gated behind
    # 'from __future__ import annotations', including Python 3.10 & 3.11.
    # https://docs.python.org/3/library/__future__.html#id1
    "from __future__ import annotations",
]

[tool.mypy]
strict = true
namespace_packages = true
show_error_codes = true
show_column_numbers = true
show_error_context = true

[tool.pytest.ini_options]
# Already move to future-default asyncio strict mode.
# https://github.com/pytest-dev/pytest-asyncio#modes
asyncio_mode = "strict"
addopts = [
    "--capture=no",  # Do not capture stdout, may hide output in some cases
    "--durations=5",  # Get attention to slow tests
    "--cov=purepythonmilter",
    "--cov-report=term-missing",
    "--cov-report=xml:.pytest-cov/coverage.xml",
    "--cov-report=html:.pytest-cov/html/",
]
log_level = "DEBUG"
